# Mlikota & Schorfheide : Sequential Monte Carlo With Model Tempering
# Dec 2021, mlikota@sas.upenn.edu

# -------------------------------------------------------------------------------


How to setup SMC estimation software (best practice guide)

(MT-project application RBC will match the general setup outlined here;
see there for concrete implementation of the general and maybe too abstract points raised here)



# -------------------------------------------------------------------------------
# -------------------------------------------------------------------------------



# -------------------------------------------------------------------------------
1. SpecFiles
# -------------------------------------------------------------------------------


DGPspec_X :       setup of true model / data source


  - setup of true model     -> needed to simulate and store data (filename should indicate dgpX)
    - defines θ0

  - could also refer to data sample used (date range, geographical unit, etc.)
    - performs raw data transformations

  - could also be suppressed in some applications where data source is fixed



Modelspec_Mi :    sets up LL under model Mi


  - defines vParLabs,
            fLL_Mi(θ),
            (mParaPointers_Mi; when using parameter-groups (non-scalar parameters)),
            functions to go from θ to model matrices and vice versa,
            ...



Priorspec_X :     sets up prior functions


  - defines fPriorDraw_Mi(),
            fPriorLogEval_Mi(θ),
            fIsDrawValid_Mi(θ)
    all of which should return nP x 1 vectors, where nP = length(θ) (needed for MT setup below)

  - may need to use data (e.g. Minnesota prior) or true parameters from DGPspec (when fixing params at true values)
  - pertains usually to a certain model Mi, so it makes sense to label the script e.g. Priorspec_Mi1



SMCspec_X :       defines tuning parameters for SMC

  - all except # of params "nP" (to have it generic to be copied for different applications and avoid errors)



Notes:

  - in main file: include all except DGPspec_X on all workers.
    From DGPspec_X, only mData needs to be distributed to all workers.

  - at this stage, Mi is a standin for an actual model name (e.g. HM, SV, L1, L2, GL, etc.).
    Reserve labels "M0" and "M1" for definitions in estimation part below.

  - Modelspec and Priorspec could be bumped together

  - In case of parameter groups/non-scalar parameters (e.g. Φ in VAR):
    in Priorspec, one cannot assign a marginal probability to each parameter (element in θ) separately.
    Then just include in the output of fPriorLogEval_Mi in the first position of this group of parameters
    (as defined by mParaPointers_Mi) the corresponding marginal probability for the whole group
    and take the entries of the remaining parameters in the group to be 1.
    Similarly for validity check in fIsDrawValid_Mi: take actual validity check to first entry and set remaining entries to true/1.



# -------------------------------------------------------------------------------
2. Folder- and Filenames
# -------------------------------------------------------------------------------


sMyPath          = ".../"


sSpecFolder     = "dgpX_mX_prX_mcX/"

sHelperFolder   =  "RunX/"               - e.g. in VARSV (each estimation-spec. run many times)
                or "SetOfProposalsX/"    - e.g. in SimpleExample (to avoid creating est.spec.-folders for each new run)
                or "" (empty)            - e.g. in RBC (each estimation specification run only once)
                                                (would be same for real world application)

sEstSpecFolder  =  "LTphiLast60/"
                or "MTphiLast60_dgpX_mX_prX_mcX/"
                or "" (empty)                       - if only one estimation strategy considered
                                                      for some real world application


sSpecPath       = sMyPath      * sSpecFolder
sHelperPath     = sSpecPath    * sHelperFolder
sEstSpecPath    = sHelperPath  * sEstSpecFolder


Output will be stored in sEstSpecPath (see below)



Notes:

  - all this complexity only arises because we consider several estimation specifications,
    which we potentially run several times. In a real application, one would have

    sSpecFolder = "mA_prX_mcX/", sHelperFolder = "", sEstSpecFolder = "LT/"
        or
    sSpecFolder = "mB_prX_mcX/", sHelperFolder = "", sEstSpecFolder = "LTphiLastX/"; and
    sSpecFolder = "mA_prX_mcX/", sHelperFolder = "", sEstSpecFolder = "MTphiLastX_mB_prX_mcX/"

  - could drop some components of sEstSpecFolder (because M0 is estimated on same DGPspec and using same SMCspec, say)
    or even sSpecPath (e.g. because DGP/Dataspec is fixed)



# -------------------------------------------------------------------------------
3. Estimation Itself
# -------------------------------------------------------------------------------


Note: all of the following need to be defined @everywhere (for all workers; parallelization)

See further details as "Notes" on bottom


a) Estimating model Mi via LT:

  0 load specification files:
      - load data from DGPspec,
      - include everywhere SMCspec,
      - include everywhere Model(1)spec, Prior(1)spec (include all functions for model Mi)

  1 set
        (first define all paths and folders from 2. above)
      - sOutputPath = sEstSpecPath (based on Mi; see above)
      - sOutputFilePrefix (should end with "_", but can also be "" (empty))

  2 define
      - vParLabs          = vParLabs_Mi
      - fLL(θ)            = fLLMi(θ)
      - fLLtilde(θ)       = 0
      - fPriorDraw()      = fPriorDraw_Mi()
      - fIsDrawValid(θ)   = minimum(fIsDrawValid_Mi(θ))
      - fPriorLogEval(θ)  = sum(fPriorLogEval_Mi(θ))

  3 set nP = length(θ) by writing nP = length(fPriorDraw()) and define tSettings for fSMC

  4 set setSeed, writeFiles

  5 run fSMC



b) Estimating model MA via MT based on MB:


  b1) estimate MB via LT: do step a) from above, changing only step 3:

    - set nP = length(θ) by writing nP = length(fPriorDraw()), set ϕ_Nϕ = ϕ_Nϕ_M0 ∈ (0,1] and define tSettings for SMC


  b2) estimate MA via MT:

    0 load specification files:
      - load data from DGPspec,
      - include everywhere SMCspec,
      - include everywhere Model1spec, Prior1spec (include all functions for MA)
      - include everywhere Model0spec, Prior0spec (include all functions for MB)

    1 set
        (first define all paths and folders from 2. above)
      - sOutputPath = sEstSpecPath (based on MA, MB and ϕ_Nϕ_M0; see above)
      - sOutputFilePrefix (should end with "_", but can also be "" (empty))

    2 First "translate" functions from suffix MA to M1 and from MB to M0 by doing essentially the same as in step 2 above,
      just once adding a suffix _M1 to all functions and once adding a suffix _M0 to all functions

    3 set nP = length(θ) by writing nP = length(fPriorDraw()), set ϕ_Nϕ = 1 and define tSettings for fSMC

    4 define

        - vPIndVariesMi = fPriorDraw_M1() .!= fPriorDraw_M1()
          for i=0,1, a nP x 1 Boolean vector indicating which parameters from θ are estimated (non-fixed) under Mi

        - vPIndvariesOnlyM1   = [vPIndVariesM1[pp] == 1 && vPIndVariesM0[pp] == 0 for pp = 1:nP]

        - fLL(θ)            = fLL_M1(θ)

        - fLLtilde(θ)       = ϕ_Nϕ_M0 * fLL_M0(θ) + (1-ϕ_Nϕ_M0) * 0

        - fPriorDraw()      = fPriorDraw_M1()
        - fIsDrawValid(θ)   = minimum( fIsDrawValid_M1(θ) )
        - fPriorLogEval(θ)  = sum( fPriorLogEval_M1(θ) )

    5 use M0-LTphiLastX path to find "...StageLast_Particles.csv" and assign this matrix to mInitParticles

    6 set vPIndDraw = vPIndVariesOnlyM1 (additional parameters that need to be drawn at initialization of SMC function)

    7 set setSeed, writeFiles

    8 run fSMC







  Notes:

    - to implement the definitions, use eval(parse(...)). For example:

      function fLL(θ)
          fLLhelp     = eval(Meta.parse(string("fLL_",Model1spec)))
          return fLLhelp(θ)
      end

      fLLtilde(θ)       = 0

      function fIsDrawValid(θ)
          fIDVHelp         =  eval(Meta.parse(string("fIsDrawValid_",Model1spec)))
          return minimum(fIDVHelp(θ))
      end

    - Need to use anonymous functions (as above) so that they can be overwritten as one changes the specifications!

    - for MT: one might be able to allow for differing priors for parameters that vary under both models (not 100% sure...):
      define vPIndvariesBoth     = [vPIndVariesM1[pp] == 1 && vPIndVariesM0[pp] == 1 for pp = 1:nP]
      and write fLL(θ) = fLL_M1(θ) + sum( fPriorLogEval_M1(θ)[vPIndvariesBoth] - fPriorLogEval_M0(θ)[vPIndvariesBoth] )
